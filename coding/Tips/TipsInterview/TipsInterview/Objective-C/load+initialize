
#pragma mark - load

//Runtime部分源码：
//call_load_methods
void call_load_methods(void)
{
    static bool loading = NO;
    bool more_categories;

    loadMethodLock.assertLocked();

    // Re-entrant calls do nothing; the outermost call will finish the job.
    if (loading) return;
    loading = YES;

    void *pool = objc_autoreleasePoolPush();

    do {
        // 1. Repeatedly call class +loads until there aren't any more
//首先会调用类的+load方法
        while (loadable_classes_used > 0) {
            call_class_loads();
        }

        // 2. Call category +loads ONCE
//然后再调用分类的+load方法
        more_categories = call_category_loads();

        // 3. Run more +loads if there are classes OR more untried categories
    } while (loadable_classes_used > 0  ||  more_categories);

    objc_autoreleasePoolPop(pool);

    loading = NO;
}

//call_class_loads
static void call_class_loads(void)
{
    int i;
    
    // Detach current loadable list.
//数组里面存放所有类
    struct loadable_class *classes = loadable_classes;
    int used = loadable_classes_used;
    loadable_classes = nil;
    loadable_classes_allocated = 0;
    loadable_classes_used = 0;
    
    // Call all +loads for the detached list.
    for (i = 0; i < used; i++) {
        Class cls = classes[i].cls;
//拿到类里面的方法
        load_method_t load_method = (load_method_t)classes[i].method;
        if (!cls) continue;

        if (PrintLoading) {
            _objc_inform("LOAD: +[%s load]\n", cls->nameForLogging());
        }
//通过指针直接调用
        (*load_method)(cls, SEL_load);
    }
    
    // Destroy the detached list.
    if (classes) free(classes);
}

void prepare_load_methods(const headerType *mhdr)
{
    size_t count, i;

    runtimeLock.assertWriting();

    classref_t *classlist =
        _getObjc2NonlazyClassList(mhdr, &count);
    for (i = 0; i < count; i++) {
//将类放入数组中
        schedule_class_load(remapClass(classlist[i]));
    }

    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &count);
    for (i = 0; i < count; i++) {
        category_t *cat = categorylist[i];
        Class cls = remapClass(cat->cls);
        if (!cls) continue;  // category for ignored weak-linked class
        realizeClass(cls);
        assert(cls->ISA()->isRealized());
        add_category_to_loadable_list(cat);
    }
}

static void schedule_class_load(Class cls)
{
    if (!cls) return;
    assert(cls->isRealized());  // _read_images should realize

    if (cls->data()->flags & RW_LOADED) return;

    // Ensure superclass-first ordering
//递归，将父类传进去，把父类加进数组中
    schedule_class_load(cls->superclass);

    add_class_to_loadable_list(cls);
    cls->setInfo(RW_LOADED);
}

/*
 +load：
load方法会在runtime加载类，分类的时候调用
每个类、分类的+load，在程序运行过程中只调用一次
 
load方法调用顺序：
 1.首先是调用类的+load方法，按类的编译顺序调用，优先编译的先调用，调用子类的+load方法之前优先调用父类的+load方法
 2.然后调用分类的+load方法，按分类的编译顺序调用，优先编译的先调用。
 
 
 +initialize:
 +initialize方法会在类第一次接收到消息时调用
 
 initialize调用顺序:
 先调用父类的+initialize，再调用子类的+initialize
 (先初始化父类，再初始化子类，每个类只会初始化1次)

 
 Questions:
 
 1.Category中有load方法吗？load方法是什么时候调用？load方法能继承吗？
 有load方法，load方法在runtime加载类、分类的时候调用，是可以继承的，但是一般情况下是不会主动调用load方法。
 
 
 2.load和initialize方法的区别是什么？它们在Catgory中的调用顺序，以及出现继承时，他们的调用过程
 1、调用方式的区别
 1）load是根据函数地址直接调用
 2）initialize是通过objc_msgSend调用
 2、调用时刻
 1）load是runtine加载类、分类的时候调用（只会调用一次）
 2）initialize是类第一次接收到消息的时候调用，每一个类只会initialize一次（父类的initialize方法可能会被调用多次）
 3、调用顺序
 1）load
 先调用类的load
 先编译的类，优先调用load
 调用子类的load之前，会先调用父类的load
 再调用分类的load
 先编译的分类，优先调用load
 2）initialize
 先初始化父类
 再初始化子类（可能最终调用的是父类的initialize方法）
 如果子类没有实现+initialize，会调用父类的+initialize（所以父类的+initialize可能会被调用多次）
 如果分类实现了+initialize，就覆盖类本身的+initialize调用

 */


