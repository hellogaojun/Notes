
//Objective-C代码转换
Objective-C --> C/C++ --> 汇编语言 --> 机器语言

Objective-C的面向对象主要是基于C/C++的数据结构【结构体】来实现的

//将Objective-C代码转换为C/C++代码
xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc OC源文件 -o 输出的CPP文件

//一个NSObject对象占用多少内存
NSObject *obj = [NSObject new];
//size1 = 16,系统分配了16个字节给NSObject,malloc_size:创建一个实例对象，实际分配了多少内存，
size_t size1 = malloc_size((__bridge const void *)(obj));
//size2 = 8,NSObject对象内部实际使用了8个字节的空间（64bit环境下，通过class_getInstanceSize获取实际使用大小）
//class_getInstanceSize: 创建一个实例对象，至少需要多少内存
size_t size2 = class_getInstanceSize(obj.class);

//OC代码本质对比

@interface NSObject {                    
    Class isa;
}

//NSObject对应的C++代码
struct NSObject_IMPL {
    Class isa;
};


@interface Person : NSObject {
    @public
    int _no;
}

@property (nonatomic, copy) NSString *name;
@property (nonatomic, assign) int age;

@end

//Person对应的C++代码
struct Person_IMPL {
    struct NSObject_IMPL NSObject_IVARS;
    int _no;
    int _age;
    NSString * _Nonnull _name;
};


@interface Student : Person

@property (nonatomic, assign) int score;
@property (nonatomic, assign) int grade;

@end

//Student对应C++代码
struct Student_IMPL {
    struct Person_IMPL Person_IVARS;
    int _score;
    int _grade;
};


//OC对象的分类
1. instance对象（实例对象）
instance对象就是通过类alloc出来的对象，每次调用alloc都会产生新的instance对象
NSObject *ob1 = [[NSObject alloc]init];
NSObject *ob2 = [[NSObject alloc]init];
ob1和obj2是NSObject的instance对象，它们是不同的两个对象，分别占据着两块不同的内存
instance对象在内存中存储的信息包括【isa指针+其他成员变量】

2. class对象（类对象）
每个类在内存中有且只有一个class对象
class对象在内存中存储的信息主要包括：
isa指针，superclass指针，类的属性信息（@property）,类的对象方法信息（instance method）,类的协议信息（protocol）,类的成员变量信息（ivar）,...

3. meta-class对象（元类对象）
每个类在内存中有且只有一个meta-class对象
meta-class对象和class对象的内存结构是一致的，在内存中存储的信息主要包括：
isa指针，superclass指针，类的方法信息（class method）,...

//isa指针
instance的isa指针指向class,当调用instance method时，通过instance的isa找到class，最后找到对象方法实现调用；
class的isa指针指向meta-class,当调用class method时，通过class的isa找到meta-class,最后找到类方法实现调用。

从64bit开始，isa需要进行一次位运算，才能计算出真实地址。


//superclass指针
1.class对象的superclass指针
当Student的instance对象想要调用Person的对象方法（instance method）时，会先通过isa指针找到Student的class，再通过superclass指针找到Person的class，
最后找到对象方法实现调用。

2.meta-class对象的superclass指针
当Student的class想要调用Person的类方法(class method)时，会先通过isa指针找到Student的meta-class，再通过superclass指针找到Person的meta-class，
最后找到对象方法实现调用。


//isa和superclass总结，参考图:isa+superclass.png
intance的isa指向class
class的isa指向meta-class
meta-class的isa指向基类(顶层父类)的meta-class

class的superclass指向父类的class,如果没有父类，superclass指针为nil

meta-class的superclass指向父类的meta-class
基类的meta-class的superclass指向基类的class

instance调用对象方法轨迹：
isa找到class,方法不存在，就通过superclass找到父类

class调用类方法的轨迹：
isa找到meta-class,方法不存在，就通过superclass找到父类

